仕様書：WYSIWYG方式 AI履歴書作成アプリケーション (最終版)
1. 概要
1.1. プロジェクトの目的
ユーザーがJIS規格に準拠した履歴書を、プレビュー画面に直接テキストを入力するWYSIWYG（What You See Is What You Get）方式で直感的に作成できるWebアプリケーションを開発する。Google Gemini APIによる文章作成支援機能を統合し、履歴書作成の効率を最大化する。

1.2. システムのゴール
直感的な直接編集: フォームとプレビューを一体化し、ユーザーが見たままのレイアウト上で直接文字を入力・編集できる。

リアルタイム保存: 編集内容は即座にブラウザのローカルストレージに保存され、ページをリロードしても作業内容が失われない。

統合されたAI支援: 自己PR欄で、キーワードを基にAI（Gemini API）が文章を自動生成する。

高品質なPDF出力: 完成した履歴書を、コンテンツ量に応じて自動改ページされる最適化されたレイアウトで、高品質なPDFとしてダウンロードできる。

動的な行管理: 学歴・職歴、免許・資格の項目を自由に追加・削除できる。

2. システム構成と技術スタック
2.1. アーキテクチャ
Jamstackアーキテクチャを採用し、Vercelへのデプロイに最適化された構成とする。UIは単一のコンポーネントに集約され、サーバーサイドのロジックはNext.jsのAPI Routesで処理する。

2.2. 技術スタック
領域

技術・ライブラリ

役割

フロントエンド

Next.js / React

アプリケーションの基盤。'use client'によるインタラクティブなUIを構築。

状態管理

Zustand

履歴書データをアプリケーション全体で管理。persistミドルウェアでローカルストレージに自動保存。

PDF生成

react-to-print

表示されているReactコンポーネントを直接PDF化する。

AI連携

@google/generative-ai

Next.jsのAPI Route経由で安全にGoogle Gemini APIを呼び出す。

スタイリング

純粋なCSS (globals.css)

contentEditable要素の挙動を制御し、JIS規格のレイアウトと印刷用スタイルを定義。

ユーティリティ

uuid

動的に追加される行にユニークなIDを付与する。

インフラ

Vercel / GitHub

ソースコード管理とCI/CDによる自動デプロイ。

3. 機能仕様とUI設計
3.1. 画面構成
アプリケーションは単一ページで構成される。画面中央に履歴書エディタ（ResumePreviewコンポーネント）が表示され、その上部に「PDFダウンロード」ボタンとタイトルが配置される。

3.2. 直接編集（WYSIWYG）機能
編集可能領域: 氏名、住所、学歴・職歴の各行など、ユーザーが入力すべきテキスト部分にcontentEditable={true}属性を設定する。

入力の検知と保存: ユーザーが編集可能な領域からフォーカスを外した際（onBlurイベント）、その内容を検知し、Zustandストアのアクションを呼び出して状態を更新する。

視覚的フィードバック: ユーザーがマウスをホバーした際や、クリックして編集中の領域には、背景色や枠線の変化で視覚的なフィードバックを与える。

3.3. 動的リスト機能（学歴・職歴、免許・資格）
各セクションの入力行にマウスカーソルを合わせると、「+」（追加）および「×」（削除）ボタンが表示される。

ボタンのクリックに応じて、Zustandストアのアクション（addHistory, deleteHistoryなど）が実行され、行が動的に増減する。

3.4. AI文章生成機能
「自己PR、本人希望記入欄など」セクションの下部に、「AI生成用のキーワード入力欄」と「AIで文章を生成」ボタンを配置する。

ユーザーがキーワードを入力してボタンをクリックすると、fetchリクエストが/api/generate-textエンドポイントに送信される。

APIは職歴などのコンテキストとキーワードを基にGoogle Gemini APIを呼び出し、生成された「自己PR」を返す。

返された文章が該当の編集領域に自動的に挿入される。

3.5. PDFダウンロード機能
画面上部の「PDFダウンロード」ボタンをクリックするとreact-to-printがトリガーされる。

@media print CSSルールにより、印刷時にはボタンなどの不要なUIが非表示になり、レイアウトが最適化される。

コンテンツの量に応じてブラウザが自動的に改ページを判断するため、1ページに収まる場合は1枚、収まらない場合は2枚以上のPDFが生成され、不自然な空白は発生しない。

4. データモデルとAPI
4.1. データモデル（Zustandストア）
profile: 氏名、住所、連絡先などの個人情報を格納するオブジェクト。

histories: 学歴・職歴の各行を格納するオブジェクトの配列。

licenses: 免許・資格の各行を格納するオブジェクトの配列。

motivation: 「志望の動機」のテキストを格納する文字列。

selfPromotion: 「自己PR、本人希望記入欄など」のテキストを格納する文字列。

4.2. APIエンドポイント: POST /api/generate-text
リクエストボディ: { keywords: string, context: { histories: [...] } }

レスポンスボディ: { generatedText: string }

処理: リクエストからキーワードと職歴を受け取り、Gemini API (gemini-1.5-flashモデル) へのプロンプトを生成して実行。生成された「自己PR」の文章をクライアントに返す。APIキーはサーバー環境変数（.env.local）で安全に管理する。